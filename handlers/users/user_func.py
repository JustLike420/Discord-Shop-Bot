from aiogram import types
from loader import dp
from states import Accounts
from aiogram.dispatcher import FSMContext
from utils import send_all_admin
from data.config import admin_login

@dp.message_handler(text="INFO", state='*')
async def info_message(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "- –ê–∫–∫–∞—É–Ω—Ç(—ã) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—á—Ç—É rambler, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä.\n–ü–æ–¥–æ–π–¥–µ—Ç –ø–æ–¥ –ª—é–±–æ–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä.\n- –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏  –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å:—Ç–æ–∫–µ–Ω –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞—Ö–æ–¥—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω.")


@dp.message_handler(text="–ü–û–ú–û–©–¨ üÜò", state='*')
async def help_message(message: types.Message, state: FSMContext):
    await state.finish()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å  –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ", url=f'https://t.me/{admin_login}'))
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å  –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", reply_markup=markup)


@dp.message_handler(text="–ó–∞–∫–∞–∑–∞—Ç—å discord  –∞–∫–∫–∞—É–Ω—Ç(—ã)", state="*")
async def buy_message(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - 1$\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    await Accounts.count.set()


@dp.callback_query_handler(text='change_order', state='*')
async def buy_message(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - 1$\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    await Accounts.count.set()


@dp.message_handler(state=Accounts.count)
async def get_count(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        get_count = int(message.text)
        await state.finish()
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text='–¥–∞', callback_data=f'confirm_order_{get_count}'),
                   types.InlineKeyboardButton(text='–Ω–µ—Ç', callback_data='cancel_order')]
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton(text='–∏–∑–º–µ–Ω–∏—Ç—å', callback_data='change_order'))
        await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ {get_count} –∞–∫–∫–∞—É–Ω—Ç?",
                             reply_markup=markup)
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n")


@dp.callback_query_handler(text_startswith="confirm_order")
async def confirm_payment(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –æ–∂–∏–¥–∞–π—Ç–µ  –ø—Ä–æ–¥–∞–≤—Ü–∞!')
    count = call.data.split('_')[2]
    user = call.from_user.username
    await send_all_admin(f"@{user} —Å–æ–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ {count} –∞–∫–∫–∞—É–Ω—Ç")


@dp.callback_query_handler(text_startswith="cancel_order")
async def cancel_payment(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')
